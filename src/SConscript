#! /usr/bin/env python

import os

Import( 'env' )

env.AppendUnique( CPPPATH=["#/", "#/src"] )

env1 = env.Copy()

ffado_source = env.Split( '\
	devicemanager.cpp \
	ffado.cpp \
	ffado_streaming.cpp \
	iavdevice.cpp \
	debugmodule/debugmodule.cpp \
	libavc/avc_connect.cpp \
	libavc/avc_definitions.cpp \
	libavc/avc_extended_cmd_generic.cpp \
	libavc/avc_extended_plug_info.cpp \
	libavc/avc_extended_stream_format.cpp \
	libavc/avc_extended_subunit_info.cpp \
	libavc/avc_function_block.cpp \
	libavc/avc_generic.cpp \
	libavc/avc_plug_info.cpp \
	libavc/avc_serialize.cpp \
	libavc/avc_signal_source.cpp \
	libavc/avc_subunit_info.cpp \
	libavc/avc_unit_info.cpp \
	libieee1394/ARMHandler.cpp \
	libieee1394/configrom.cpp \
	libieee1394/csr1212.c \
	libieee1394/ieee1394service.cpp \
	libieee1394/IEC61883.cpp \
	libosc/OscArgument.cpp \
	libosc/OscClient.cpp \
	libosc/OscMessage.cpp \
	libosc/OscNode.cpp \
	libosc/OscResponse.cpp \
	libosc/OscServer.cpp \
	libstreaming/cip.c \
	libstreaming/IsoHandler.cpp \
	libstreaming/IsoHandlerManager.cpp \
	libstreaming/IsoStream.cpp \
	libstreaming/Port.cpp \
	libstreaming/PortManager.cpp \
	libstreaming/StreamProcessor.cpp \
	libstreaming/StreamProcessorManager.cpp \
	libutil/DelayLockedLoop.cpp \
	libutil/PacketBuffer.cpp \
	libutil/OptionContainer.cpp \
	libutil/PosixThread.cpp \
	libutil/ringbuffer.c \
	libutil/serialize.cpp \
	libutil/StreamStatistics.cpp \
	libutil/SystemTimeSource.cpp \
	libutil/Time.c \
	libutil/TimeSource.cpp \
	libutil/TimestampedBuffer.cpp \
' )

bebob_source = env.Split( '\
	bebob/bebob_avdevice.cpp \
	bebob/bebob_avdevice_subunit.cpp \
	bebob/bebob_avplug.cpp \
	bebob/bebob_dl_bcd.cpp \
	bebob/bebob_dl_codes.cpp \
	bebob/bebob_dl_mgr.cpp \
	bebob/bebob_functionblock.cpp \
	bebob/GenericMixer.cpp \
	maudio/maudio_avdevice.cpp \
' )

motu_source = env.Split( '\
	motu/motu_avdevice.cpp \
	libstreaming/MotuPort.cpp \
	libstreaming/MotuPortInfo.cpp \
	libstreaming/MotuStreamProcessor.cpp \
' )

dice_source = env.Split( '\
	dice/dice_avdevice.cpp \
' )

bounce_source = env.Split( '\
	bounce/bounce_avdevice.cpp \
	bounce/bounce_slave_avdevice.cpp \
	libstreaming/AmdtpSlaveStreamProcessor.cpp \
' )

metric_halo_source = env.Split( '\
	metrichalo/mh_avdevice.cpp \
' )

rme_source = env.Split( '\
	rme/rme_avdevice.cpp \
' )

amdtp_source = env.Split( '\
	libstreaming/AmdtpPort.cpp \
	libstreaming/AmdtpPortInfo.cpp \
	libstreaming/AmdtpStreamProcessor.cpp \
' )

source = ffado_source
if env['ENABLE_BEBOB']:
	source += bebob_source + amdtp_source
if env['ENABLE_MOTU']:
	source += motu_source
if env['ENABLE_DICE']:
	source += dice_source
if env['ENABLE_METRIC_HALO']:
	source += metric_halo_source
if env['ENABLE_RME']:
	source += rme_source
if env['ENABLE_BOUNCE']:
	source += bounce_source

env1.AppendUnique( LINKFLAGS = env.Split("-Wl,-rpath $libdir -Wl,-soname -Wl,libffado.so.1 --version-info=1:0:0") )
ffadolib = env1.SharedLibrary( "ffado", source )

#
# All the following tries to emulate the versioning of installed libs as seen from libtool...
#
if False:
	print "Trying to emulate libtools versioned install"
	env1.Alias( "install", env1.InstallAs( os.path.join('$libdir','libffado.so.$LIBVERSION'), ffadolib ) )
	env1.Ignore( ffadolib, os.path.join('$libdir','libffado.so') )
	#env.Ignore( os.path.join('$libdir','libffado.so'), ffadolib )
	#env.Ignore( os.path.join('$libdir','libffado.so.0'), "install" )

	env1.Alias( "install", env1.Command(
		target="$libdir/libffado.so",
		source=env1['libdir']+"/libffado.so.$LIBVERSION",
		action="ln -s $SOURCE $TARGET"
		) )
	env1.Alias( "install", env1.Command(
		target="$libdir/libffado.so.%s" % str(env1['LIBVERSION']).rsplit('.',1)[0],
		source=env1['libdir']+"/libffado.so.$LIBVERSION",
		action="ln -s $SOURCE $TARGET"
		) )
	env1.Alias( "install", env1.Command(
		target="$libdir/libffado.so.%s" % str(env1['LIBVERSION']).rsplit('.',2)[0],
		source=env1['libdir']+"/libffado.so.$LIBVERSION",
		action="ln -s $SOURCE $TARGET"
		) )
else:
	print "Doing simple install"
	env1.Alias( "install", env1.Install( "$libdir", ffadolib ) )


#
# For the debugging apps
#
env2 = env.Copy()
env2.AppendUnique( LIBPATH="#/src" )
env2.AppendUnique( LIBS="ffado" )

apps = { \
	"bridgeco-downloader": "bridgeco-downloader.cpp", \
	"bebob-sync" : "bebob-sync.cpp", \
	"test-debugmodule" : "debugmodule/test_debugmodule.cpp", \
	"test-dll" : "libutil/test-dll.cpp", \
	"test-unittests-util" : "libutil/unittests.cpp", \
	"test-unittests-osc" : "libosc/unittests.cpp" \
}

for app in apps.keys():
	env2.Program( target=app, source = env.Split( apps[app] ) )

