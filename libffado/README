FFADO v2.x
==========

The FFADO project aims to provide a free driver implemenation for FireWire 
(IEEE1394, iLink) based (semi-) professional audio interfaces. The focus of
the project are on audio/music production rather than consumer audio. This
means that, although we intend to supported all features at some point, 
consumer features are considered less important. The most obvious example of
a consumer feature is AC3/DTS passthrough support, which is unsupported at 
the moment.

This package provides the libffado shared library that provides a unified
programming interface to configure and use all supported devices. Currently
this library is used by the 'firewire' backends of the jack audio connection
kit sound server (jackaudio.org). This backend provides audio and midi support,
and is available both in jackd and it's multiprocessor variant jackdmp.
(note: At the moment there is no support for ALSA nor for pulseaudio.)

Access to the device internal configuration (e,g, internal mixer) is exposed
using the ffado-dbus-server daemon. This daemon exposes the configurable 
parameters of all detected devices through DBUS. The ffadomixer application in
support/mixer presents a GUI to control these parameters (only for officially
supported devices).

Features
--------
* 24-bit audio input/output (unlimited number of channels)
* supports for all samplerates a device supports
* MIDI input/output (unlimited number of channels)
* Support for S/PDIF and ADAT/SMUX I/O
* Internal mixer and device control support for all officially supported 
  devices (NOTE: no support for internal DSP)
* Support for device aggregation (limited to devices on the same bus)

Device Support
--------------

The devices officially supported are:
* ESI Quatafire 610
* Terratec Producer Phase 88
* Focusrite Saffire (original/white)
* Focusrite Saffire PRO10
* Focusrite Saffire PRO26
* ECHO AudioFire2, AudioFire4, AudioFire8, AudioFire12
* Mackie Onyx Mixer FireWire expansion

The 'officially supported' label is only given to devices that fullfil the
following:
* at least one of the developers has the device
* the vendor provides development support (access to information)
* the device works

Through reverse-engineering the following devices will also work:
* MOTU traveller
* MOTU 828mkII
Note: the support for these devices is based on a significant reverse
engineering effort. This means that the developers had no support from the
device vendor, and this of course limits the extent to which problems can
be solved. You have been warned. Please do not buy devices for which support
is based upon reverse engineering, nor from vendors that are Linux-hostile
(e.g. MOTU). Value the support that some vendors provide and buy their
stuff. Check ffado.org for details. It can't be said enough: currently it is
extremely unwise to buy a MOTU device if you intend to use Linux.

The driver is written to provide generic support for all devices it might be
able to handle. This means that most devices based on the BridgeCo BeBoB or
the ECHO FireWorks platform will work, at least to a certain extent.

Devices that have been reported to (partially) work with the generic support:
* Presonus FireBox
* Presonus FirePod / FP10
* Alesis io14
* TC Konnekt 8, Konnekt 24D, Konnekt Live

Usupported devices:
* Presonus FireStation
* Presonus FireStudio (all variants)
* Other TC Konnekt devices
* Other Alesis devices
* Metric Halo devices
* RME Firewire devices

We constantly try to persuade vendors to help us extend our device support.

Dependencies
------------

To build libffado you need several libraries. For all libraries a
version is provided which is a 'known good' version.  The first few
libraries it seems it is not necessary that the version must
match. The chances that it works also with an older versions are good:

libxml++2   (>= 2.6.13)

These libraries here should be at least the version listed:

libraw1394  (>= 1.3.0),  http://www.linux1394.org
libiec61883 (>= 1.1.0),  http://www.linux1394.org
dbus-1      (>= 1.0),    http://dbus.freedesktop.org

Currently only the jackd audio server is supported.

jackd (>= 0.109.12), http://jackaudio.org
[NOTE: at the time of writing, this is the development (SVN) version.]

Optionally, but recommended is that you install qjackctl:

qjackctl (>= 0.2.20.10), http://sourceforge.net/projects/qjackctl

To build the optional ffado device mixer control utility you also require:

Qt  >= 4.0,            http://trolltech.com/products/qt
SIP >= 4.7.0,          http://www.riverbankcomputing.co.uk/software/sip/intro
PyQt (note below),     http://www.riverbankcomputing.co.uk/software/pyqt/intro 
dbus-python >= 0.82.0, http://dbus.freedesktop.org/releases/dbus-python/

The mixer applets are available for both QT3 and QT4. However, the QT3 versions
are no longer actively developed. The build script will automatically fallback
to the QT3 version if you don't have QT4 installed.

The version of PyQt must be chosen to exactly match the version of Qt in use.
For Qt 4.x use PyQt 4.x.

SIP is only required to compile PyQt.  If using a binary package of PyQt
SIP should not be needed.

How to build
------------

If you want to build the release version you can simply do following:

$ scons
$ scons install

If you want some debug information (because something seems not
to work correctly) you can try to do following:

$ scons DEBUG=yes
$ scons install

More extended instructions can be found here:
http://subversion.ffado.org/wiki/CompilationGuides

NOTE: In order to build jackd with ffado support, you have 
to install libffado before you build jackd. The backend to use in jackd is
firewire.

NOTE: the beta versions are distributed with debugging enabled by default.

DISTRIBUTION PACKAGERS NOTE: Please do not enable support for devices
if it is not on by default. If device support for a specific device
is not turned on by default by the developers, it means that it is not
ready yet. Most of the time it is placeholder code for future devices.

Running jackd
-------------

The easiest way to run this is using qjackctl. There are only minor 
differences with the other backends, however you should change some
of the default values:
- It is recommended to change the 'periods/buffer' field to 3, especially
  if you use low period sizes (=< 128)
- It is recommended to raise the RT priority to 70.

In order to get it running from the command line, you need to provide some 
arguments to jackd.

Run 

$ jackd -d firewire --help

to see the backend options. You can easily figure out how to set them using
the remarks given above (for qjackctl).

For the other aspects of jackd usage, consult the jackd documentation.

Here is a sample session (without realtime support enabled):

    $ jackd -d firewire
    no message buffer overruns
    jackd 0.111.0
    Copyright 2001-2005 Paul Davis and others.
    jackd comes with ABSOLUTELY NO WARRANTY
    This is free software, and you are welcome to redistribute it
    under certain conditions; see the file COPYING for details
    
    JACK compiled with System V SHM support.
    loading driver ..
    3106528665:  (ffado.cpp)[  99] ffado_streaming_init: libffado 1.999.20 built Apr 26 2008 20:26:32
    libiec61883 warning: Established connection on channel 0.
    You may need to manually set the channel on the receiving node.
    libiec61883 warning: Established connection on channel 1.
    You may need to manually set the channel on the transmitting node.

(Note: you can safely ignore the libiec61883 warnings, they are normal.)

An important remark is that for good performance, one should always run jack
with the -R flag to enable realtime scheduling for critical threads:
    $ jackd -R -d firewire

In case of problems
-------------------

First of all, check whether your problem is in fact a problem, and
whether it is a FFADO problem. The magic tool for this is google.

User support is a rather annoying occupation, especially since it sucks
time from developers that are not paid for developing, let alone for doing
user support. Please make sure that you have checked the following places:
    http://www.ffado.org/
    http://subversion.ffado.org/
    http://www.google.com/
      (the terms "ffado-devel" "ffado-user" or "freebob-user" work great)
Some might consider this a bit arrogant or "newbie-unfriendly", but personally
I (Pieter Palmers) consider this a matter of politeness towards the developers.

If you have tried to find a solution to your problem, but you couldn't find
one or are confused, don't hesitate to ask for help. The preferred way is by
signing up to the mailing list as described on http://www.ffado.org/?q=contact.

Writing a bug report
--------------------

Note that the more effort you put in your bug report, the more effort we
will put into helping you.

Make sure you have compiled a DEBUG=yes version of
libffado. If not there is no way we can trace the problem.

When reporting a problem, please run jackd with the --verbose option,
and add the -v6 option to the firewire backend:
    $ jackd --verbose [...] -d firewire -v6 [...]

    ( [...] = other options )

This will generate an increadible amount of debug output that should
contain what we need to track down the problem. If you have troubles
saving the output, try redirecting it to a file:

    $ jackd --verbose -d firewire -v6 2> ffado-jack.log

this will create a ffado.log file containing the output. Use CTRL-C
to exit jack if necessary.

The distribution contains a tool to gather some information about your
system. you can run it as follows:

    $ cd support/tools
    $ python ffado-diag.py > ffado-diag.log

It will check your system for basic problems and gather some information
regarding your hardware configuration. This will allow us to diagnose
your problem faster.

Once the logs have been created you can create a support ticket at
http://subversion.ffado.org/newticket

Be sure to include the following information:
* the log file(s) (zipped/tar.gz'ed and attached)
* the device you're trying to use
* a description of what went wrong and how to reproduce it. You
  preferrably try to figure out a sequence of steps that can reliably
  reproduce the issue on your system. A one-time failure is very difficult
  to diagnose and/or fix.
* the distribution and its version


