#
# library
#

import os
import sys

#Import( 'env' )
Import( 'externalenv' )
#dbus_env = env.Copy()

dbus_env = externalenv.Copy()

if dbus_env.has_key('DBUS1_FLAGS'):
    dbus_env.MergeFlags( dbus_env['DBUS1_FLAGS'] )

# add the local version of libdbus++
dbus_env.AppendUnique( CPPPATH=["#/external/dbus/include"] )
dbus_env.AppendUnique( LIBPATH=[dbus_env['build_base']+"external/dbus"])
dbus_env.AppendUnique( LIBS=["dbus-c++"] )
dbus_env.AppendUnique( CCFLAGS=["-DDBUS_API_SUBJECT_TO_CHANGE"] )

# this is required to indicate that the DBUS version we use has support
# for platform dependent threading init functions
# this is true for DBUS >= 0.96 or so. Since we require >= 1.0 it is
# always true
dbus_env.AppendUnique( CCFLAGS=["-DDBUS_HAS_THREADS_INIT_DEFAULT"] )

sources = [
	'src/connection.cpp',
	'src/debug.cpp',
	'src/dispatcher.cpp',
	'src/error.cpp',
	'src/eventloop.cpp',
	'src/interface.cpp',
	'src/introspection.cpp',
	'src/property.cpp',
	'src/message.cpp',
	'src/object.cpp',
	'src/pendingcall.cpp',
	'src/server.cpp',
	'src/types.cpp'
]

if dbus_env.has_key('DEBUG') and dbus_env['DEBUG']:
	dbus_env.AppendUnique( CCFLAGS=["-DDEBUG","-g"] )

dbus_env.PrependUnique( LIBS=["expat"] )
libdbuspp=dbus_env.StaticLibrary('dbus-c++', sources)

#
# tools
#

tools_env = dbus_env.Copy()

introspect_sources = [
	'tools/introspect.cpp',
]

xml2cpp_sources = [
	'tools/xml.cpp','tools/xml2cpp.cpp'
]

tools_env.AppendUnique( CCFLAGS=["-DDBUS_API_SUBJECT_TO_CHANGE"] )
tools_env.AppendUnique( CPPPATH=["#/external/dbus/include"] )
tools_env.PrependUnique( LIBPATH=dbus_env['build_base']+"external/dbus" )
tools_env.PrependUnique( LIBS="dbus-c++" )

dbusxx_introspect = tools_env.Program('dbusxx-introspect', introspect_sources)
dbusxx_xml2cpp = tools_env.Program('dbusxx-xml2cpp', xml2cpp_sources)

